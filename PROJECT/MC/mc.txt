def process_group_mc(material_data, mode, key_main=None, key_dt=None):
    if mode == 0:
        # Mode 0: Group by both key_main and key_dt
        group = defaultdict(lambda: defaultdict(list))
        for item in material_data:
            parent_id = item.get(key_main)
            child_id = item.get(key_dt)
            key = (parent_id, child_id)
            group[parent_id][key].append(item)
    elif mode == 1:
        # Mode 1: Group only by key_main
        group = defaultdict(list)
        for item in material_data:
            parent_id = item.get(key_main)
            group[parent_id].append(item)
    else:
        raise ValueError("Invalid mode. Mode should be 0 or 1.")
    
    return group

function processGroupMC(materialData, mode, keyMain = null, keyDt = null) {
    if (mode === 0) {
        // Mode 0: Group by both keyMain and keyDt
        const group = {};
        materialData.forEach(item => {
            const parentId = item[keyMain];
            const childId = item[keyDt];
            const key = `${parentId}_${childId}`; // Combining parentId and childId as key
            
            if (!group[parentId]) {
                group[parentId] = {};
            }
            if (!group[parentId][key]) {
                group[parentId][key] = [];
            }
            group[parentId][key].push(item);
        });
        return group;
    } else if (mode === 1) {
        // Mode 1: Group only by keyMain
        const group = {};
        materialData.forEach(item => {
            const parentId = item[keyMain];
            
            if (!group[parentId]) {
                group[parentId] = [];
            }
            group[parentId].push(item);
        });
        return group;
    } else {
        throw new Error("Invalid mode. Mode should be 0 or 1.");
    }
}


       sql = []
       for parent_id, child_dict in group.items():
            print(f"FG MAT: {parent_id}")
            condition_seq_no = False
            qpa = 1
            seq_no = 0
            fg_qty =  0

            for child_index, (key, details) in enumerate(child_dict.items()):
                child_id = key[1]
                print(f"  MAT: {child_id} ")
                
                for dt_index, detail in enumerate(details):
                    if child_index == 0 and dt_index == 0:
                        m_group = detail.get('m_group', None)
                        if m_group == 'F':
                            condition_seq_no = True

                    if condition_seq_no:
                        if dt_index == 0:
                            seq_no = detail.get('seq_no', child_index)
                    else:
                        seq_no = child_index

                    if dt_index == 0:
                        qpa = detail.get('qpa', 1) 
                        fg_qty  = detail.get('fg_qty', 1) 
                       
                    
                    if  detail.get('z_prod_order', None) or detail.get('z_plan_order', None) :
                        wo_pl_order = detail.get('z_prod_order', None) or detail.get('z_plan_order', None)
                        wo_pl_status =  detail.get('z_status', None) 
                        wo_pl_qty=  detail.get('z_orignal_qty', 0) 
                        start_date = detail.get('z_start_date', None)
                        qty = detail.get('z_orignal_qty', 0)
                        balance = detail.get('balance', 0)
                        
                        cmp_kit_shock = round(detail.get('count_cal_kit', 0))
                        cmp_kit_item = detail.get('cmp_kit', 0)
                        if cmp_kit_shock != 0:
                            cmp_kit_per_shock = round(detail.get('cal_kit', 0))
                            if cmp_kit_item != 0:
                                cmp_kit_per_item =  round(100 - ((cmp_kit_shock/cmp_kit_item) * 100))
                        else:
                            cmp_kit_per_shock = 100
                            cmp_kit_per_item = 100
                    else:
                        wo_pl_qty = 0
                        wo_pl_status =  None
                        wo_pl_order  = None
                        start_date = None
                        qty = 0
                        balance = 0
                        cmp_kit_shock = 0
                        cmp_kit_item = 0
                        cmp_kit_per_item = 0
                        cmp_kit_per_shock = 0
                        
                                                
                    if  detail.get('so', None):
                        sale_no = detail.get('so', None)
                        sale_item = detail.get('so_item', None)
                        sale_qty = detail.get('so_qty', None)
                        sale_var = detail.get('variance', None)
                        sale_price = detail.get('so_net_price', None)
                        sale_amount = detail.get('so_amount', None)
                        if detail.get('so_workweek', None) is not None:
                            sale_year, sale_ww = detail.get('so_workweek', None).split("-")
                        else:
                            sale_year = None
                            sale_ww = None
                    else:
                        sale_no = None
                        sale_item = None
                        sale_qty = 0
                        sale_var = 0
                        sale_price = 0
                        sale_amount = 0
                        sale_year = None
                        sale_ww = None
                        
                    
                    fg_material_no = detail.get('fg_material_no', None)
                    material_no = detail.get('material_no', None)
                    summary = detail.get('summary', None)
                    primary_sub = detail.get('primary_sub', 0)
                    
                    
                    if summary != '1':
                        data = {
                            'fg_material_no'=fg_material_no,
                            'material_no'=material_no,
                            'plant' = data_user.get('plant') or '-',
                            'create_date' = now,
                            'seq_no' = seq_no,
                            'item_no' = child_index,
                            'qpa' = qpa,
                            'start_date' = start_date,
                            'wo_pl_status' = wo_pl_status,
                            'wo_pl_order' = wo_pl_order,
                            'cmp_kit_per_shock' = cmp_kit_per_shock,
                            'cmp_kit_shock' = cmp_kit_shock,
                            'cmp_kit_item' = cmp_kit_item,
                            'primary_sub' = primary_sub,
                            'sale_no' = sale_no,
                            'sale_item' = sale_item,
                            'sale_qty' = sale_qty,
                            'sale_var' = sale_var,
                            'sale_price' = sale_price,
                            'sale_amount' = sale_amount,
                            'sale_year' = sale_year,
                            'balance' = balance,
                            'sale_ww' = sale_ww,
                            'wo_pl_qty' = wo_pl_qty
                        }
                        sql.append(data)
